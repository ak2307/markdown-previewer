{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","markdown","handleChange","bind","event","this","setState","target","value","renderer","Renderer","link","href","title","text","className","id","placeholder","rows","onChange","dangerouslySetInnerHTML","__html","breaks","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAEIA,G,MAASC,EAAQ,KA4CNC,E,kDAzCX,WAAYC,GAAO,IAAD,8BAClB,gBACSC,MAAQ,CACbC,SAAW,sVAEf,EAAKC,aAAc,EAAKA,aAAaC,KAAlB,gBALD,E,yDAOLC,GACTC,KAAKC,SAAU,CAACL,SAAUG,EAAMG,OAAOC,U,+BAGhC,IAAD,OACAC,EAAW,IAAIb,EAAOc,SAE5B,OADAD,EAASE,KAAO,SAACC,EAAMC,EAAOC,GAAd,yBAAmCF,EAAnC,8BAA6DE,EAA7D,SAEZ,6BACI,wBAAIC,UAAU,WAAd,6BACA,yBAAKA,UAAU,aACX,yBAAKC,GAAG,gBAAgBH,MAAM,gBAAgBE,UAAU,gBACpD,wBAAIA,UAAU,kBAAd,kBACA,8BACIE,YAAY,iBACZC,KAAK,KACLV,MAAOH,KAAKL,MAAMC,SAClBe,GAAG,SACHG,SAAW,SAACf,GAAD,OAAW,EAAKF,aAAaE,OAGhD,yBAAKS,MAAM,mBAAmBE,UAAU,gBACpC,wBAAIA,UAAU,kBAAd,mBACA,yBAAKC,GAAG,UAAUI,wBAA2B,CAAEC,OAAQzB,EAAOS,KAAKL,MAAMC,SAAU,CAACqB,QAAQ,EAAMb,uB,GA/BxGc,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aed88a50.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nlet marked = require(\"marked\");\n\nclass App extends Component {\n    constructor(props){\n    super();\n        this.state = {\n        markdown : \"# Heading\\n## Sub-heading\\n\\n[This is a link.](https://www.freecodecamp.org)\\n\\n`This is inline code.`\\n\\n```\\nThis is a code block.\\n```\\n\\nThis is a list:\\n* item 1\\n* item 2\\n* item 3\\n\\n> This is a blockquote.\\n\\n![Image](https://raw.githubusercontent.com/Johnny2136/FCC-Projects/master/images/images.png)\\n\\n**This is bolded text.**'\"\n    }\n    this.handleChange =this.handleChange.bind(this);\n}\n    handleChange(event) {\n        this.setState ({markdown: event.target.value});\n    }\n\n    render () {\n        const renderer = new marked.Renderer();\n        renderer.link = (href, title, text) => `<a href \"${href}\" target =\"_blank\">${text}</a>`\n        return (\n            <div>\n                <h1 className=\"heading\">Markdown Editor/Previewer</h1>\n                <div className=\"container\">\n                    <div id=\"editor-window\" title=\"editor window\" className=\"outer-window\">\n                        <h1 className=\"window-heading\">Markdown Input</h1>\n                        <textarea \n                            placeholder=\"Enter Markdown\" \n                            rows=\"40\" \n                            value={this.state.markdown} \n                            id=\"editor\" \n                            onChange= {(event) => this.handleChange(event)}>\n                        </textarea>\n                    </div>\n                    <div title=\"previewer window\" className=\"outer-window\">\n                        <h1 className=\"window-heading\">Markdown Output</h1>\n                        <div id=\"preview\" dangerouslySetInnerHTML = {{ __html: marked(this.state.markdown, {breaks: true, renderer})}}>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}